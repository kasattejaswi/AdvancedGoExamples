// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package calender

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalenderServiceClient is the client API for CalenderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalenderServiceClient interface {
	GetDate(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (*DateResponse, error)
}

type calenderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalenderServiceClient(cc grpc.ClientConnInterface) CalenderServiceClient {
	return &calenderServiceClient{cc}
}

func (c *calenderServiceClient) GetDate(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (*DateResponse, error) {
	out := new(DateResponse)
	err := c.cc.Invoke(ctx, "/calender.CalenderService/GetDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalenderServiceServer is the server API for CalenderService service.
// All implementations must embed UnimplementedCalenderServiceServer
// for forward compatibility
type CalenderServiceServer interface {
	GetDate(context.Context, *DateRequest) (*DateResponse, error)
	mustEmbedUnimplementedCalenderServiceServer()
}

// UnimplementedCalenderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalenderServiceServer struct {
}

func (UnimplementedCalenderServiceServer) GetDate(context.Context, *DateRequest) (*DateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDate not implemented")
}
func (UnimplementedCalenderServiceServer) mustEmbedUnimplementedCalenderServiceServer() {}

// UnsafeCalenderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalenderServiceServer will
// result in compilation errors.
type UnsafeCalenderServiceServer interface {
	mustEmbedUnimplementedCalenderServiceServer()
}

func RegisterCalenderServiceServer(s grpc.ServiceRegistrar, srv CalenderServiceServer) {
	s.RegisterService(&CalenderService_ServiceDesc, srv)
}

func _CalenderService_GetDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalenderServiceServer).GetDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calender.CalenderService/GetDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalenderServiceServer).GetDate(ctx, req.(*DateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalenderService_ServiceDesc is the grpc.ServiceDesc for CalenderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalenderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calender.CalenderService",
	HandlerType: (*CalenderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDate",
			Handler:    _CalenderService_GetDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calender/calender.proto",
}

// GreeterServiceClient is the client API for GreeterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterServiceClient interface {
	GetGreeting(ctx context.Context, in *GreetingRequest, opts ...grpc.CallOption) (*GreetingResponse, error)
}

type greeterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterServiceClient(cc grpc.ClientConnInterface) GreeterServiceClient {
	return &greeterServiceClient{cc}
}

func (c *greeterServiceClient) GetGreeting(ctx context.Context, in *GreetingRequest, opts ...grpc.CallOption) (*GreetingResponse, error) {
	out := new(GreetingResponse)
	err := c.cc.Invoke(ctx, "/calender.GreeterService/GetGreeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServiceServer is the server API for GreeterService service.
// All implementations must embed UnimplementedGreeterServiceServer
// for forward compatibility
type GreeterServiceServer interface {
	GetGreeting(context.Context, *GreetingRequest) (*GreetingResponse, error)
	mustEmbedUnimplementedGreeterServiceServer()
}

// UnimplementedGreeterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServiceServer struct {
}

func (UnimplementedGreeterServiceServer) GetGreeting(context.Context, *GreetingRequest) (*GreetingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGreeting not implemented")
}
func (UnimplementedGreeterServiceServer) mustEmbedUnimplementedGreeterServiceServer() {}

// UnsafeGreeterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServiceServer will
// result in compilation errors.
type UnsafeGreeterServiceServer interface {
	mustEmbedUnimplementedGreeterServiceServer()
}

func RegisterGreeterServiceServer(s grpc.ServiceRegistrar, srv GreeterServiceServer) {
	s.RegisterService(&GreeterService_ServiceDesc, srv)
}

func _GreeterService_GetGreeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServiceServer).GetGreeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calender.GreeterService/GetGreeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServiceServer).GetGreeting(ctx, req.(*GreetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GreeterService_ServiceDesc is the grpc.ServiceDesc for GreeterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreeterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calender.GreeterService",
	HandlerType: (*GreeterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGreeting",
			Handler:    _GreeterService_GetGreeting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calender/calender.proto",
}
